@using Lab08.MVC.Web.Models
@{
    var paginationModel = (PaginationModel)ViewData["PaginationData"];
}
<label >Items per page</label>
<ul class="nav">
    @for (int i = 2; i < 64; i *= 2)
    {
    <li class="nav-item">
        @if (i == paginationModel.ElementsOnPage)
        {
            <a class="nav-link disabled" href="@Url.Action(paginationModel.ActionNavigationName, "Home", new { userId = paginationModel.UserId, searchWord = paginationModel.SearchWord, elementsOnPage = i})">@i</a>
        }
        else
        {
            <a class="nav-link active" href="@Url.Action(paginationModel.ActionNavigationName, "Home", new { userId = paginationModel.UserId, searchWord = paginationModel.SearchWord, elementsOnPage = i})">@i</a>

        }
    </li>
    }
</ul>
@if (paginationModel.TotalPages > 1)
{
    <nav class="pagination justify-content-center">
        <ul class="pagination">

            @if (paginationModel.CurrentPage > 0)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action(paginationModel.ActionNavigationName, "Home", new { pageNumber = paginationModel.CurrentPage - 1, userId = paginationModel.UserId, searchWord = paginationModel.SearchWord, elementsOnPage = paginationModel.ElementsOnPage})" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
                if (paginationModel.CurrentPage == 1)
                {
                    <li id="backwardPage" class="page-item">@Html.ActionLink(paginationModel.CurrentPage.ToString(), paginationModel.ActionNavigationName, "Home", new { pageNumber = paginationModel.CurrentPage - 1, userId = paginationModel.UserId, searchWord = paginationModel.SearchWord, elementsOnPage = paginationModel.ElementsOnPage }, new { @class = "page-link" })</li>
                }
                else
                {
                    <!--getting last 2 pages-->
                    for (int i = paginationModel.CurrentPage - 2; i < paginationModel.CurrentPage; i++)
                    {
                        <li class="page-item">@Html.ActionLink((i + 1).ToString(), paginationModel.ActionNavigationName, "Home", new { pageNumber = i, userId = paginationModel.UserId, searchWord = paginationModel.SearchWord, elementsOnPage = paginationModel.ElementsOnPage }, new { @class = "page-link" })</li>
                    }
                }
            }
            else
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
            }
            <!--current and next 2 pages-->
            @for (int i = paginationModel.CurrentPage; i < paginationModel.TotalPages && i < paginationModel.CurrentPage + 3; i++)
            {
                if (i == paginationModel.CurrentPage)
                {
                    <li class="page-item active">@Html.ActionLink((i + 1).ToString(), paginationModel.ActionNavigationName, "Home", new { pageNumber = i, userId = paginationModel.UserId, searchWord = paginationModel.SearchWord, elementsOnPage = paginationModel.ElementsOnPage }, new { @class = "page-link" })</li>
                }
                else
                {
                    <li class="page-item">@Html.ActionLink((i + 1).ToString(), paginationModel.ActionNavigationName, "Home", new { pageNumber = i, userId = paginationModel.UserId, searchWord = paginationModel.SearchWord, elementsOnPage = paginationModel.ElementsOnPage }, new { @class = "page-link" })</li>
                }
            }
            <!--right arrow if we have one more page on a right-->
            @if (paginationModel.TotalPages - paginationModel.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action(paginationModel.ActionNavigationName, "Home", new { pageNumber = paginationModel.CurrentPage + 1, userId = paginationModel.UserId, searchWord = paginationModel.SearchWord, elementsOnPage = paginationModel.ElementsOnPage })" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
            }
        </ul>
    </nav>

}
